<?php

namespace MxcDropshipInnocigs;

require __DIR__ . '/vendor/autoload.php';

use MxcDropshipInnocigs\Application\Application;
use MxcDropshipInnocigs\Bootstrap\Database;
use MxcDropshipInnocigs\Client\InnocigsClient;
use MxcDropshipInnocigs\Exception\ApiException;
use MxcDropshipInnocigs\Exception\DatabaseException;
use Shopware\Components\Plugin;
use Shopware\Components\Plugin\Context\ActivateContext;
use Shopware\Components\Plugin\Context\DeactivateContext;
use Shopware\Components\Plugin\Context\InstallContext;
use Shopware\Components\Plugin\Context\UninstallContext;
use Zend\Log\Logger;

class MxcDropshipInnocigs extends Plugin
{
    /**
     * Write phpinfo.html to log directory
     */
    private function createPhpInfo() {
        ob_start();
        phpinfo();
        $data = ob_get_contents();
        ob_clean();
        $logPath = Shopware()->DocPath().'var/log/phpinfo.html';
        file_put_contents($logPath, $data);
    }

    /**
     * @param InstallContext $installContext
     * @return boolean
     */
    public function install(InstallContext $installContext)
    {
        $services = Application::getServices();
        $logger = $services->get(Logger::class);
        try {
            $database = $services->get(Database::class);
            $database->install();
            return true;
        } catch(DatabaseException $e) {
            $logger->err('Failed to install database: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * @param UninstallContext $uninstallContext
     * @return boolean
     */
    public function uninstall(UninstallContext $uninstallContext)
    {
        if ($uninstallContext->keepUserData()) {
            return true;
        }
        $services = Application::getServices();
        $logger = $services->get(Logger::class);
        try {
            $database = $services->get(Database::class);
            $database->uninstall();
            return true;
        } catch (DatabaseException $e) {
            $logger->err('Failed to uninstall database: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function activate(ActivateContext $activateContext)
    {
        $services = Application::getServices();
        $client = $services->get(InnocigsClient::class);
        $logger = $services->get(Logger::class);

        $result = false;
        // download InnoCigs items
        try {
            $client->downloadItems();// && $client->createSWEntries();
            // $activateContext->scheduleClearCache(InstallContext::CACHE_LIST_ALL);
            $result = true;
        } catch (ApiException $e) {
            $logger->err($e->getMessage());
        } catch(DatabaseException $e) {
            $logger->err($e->getMessage());
        }
        return $result;
    }

    public function deactivate(DeactivateContext $context)
    {
        parent::deactivate($context); // TODO: Change the autogenerated stub
    }
}
