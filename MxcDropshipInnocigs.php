<?php

namespace MxcDropshipInnocigs;

require __DIR__ . '/vendor/autoload.php';

use Exception;
use MxcDropshipInnocigs\Application\Application;
use MxcDropshipInnocigs\Bootstrap\Database;
use MxcDropshipInnocigs\Client\InnocigsClient;
use Shopware\Components\Plugin;
use Shopware\Components\Plugin\Context\ActivateContext;
use Shopware\Components\Plugin\Context\DeactivateContext;
use Shopware\Components\Plugin\Context\InstallContext;
use Shopware\Components\Plugin\Context\UninstallContext;

class MxcDropshipInnocigs extends Plugin
{
    /**
     * @param InstallContext $installContext
     * @return boolean
     */
    public function install(InstallContext $installContext)
    {
        $services = Application::getServices();
        $exceptionLogger = $services->get('exceptionLogger');
        try {
            $database = $services->get(Database::class);
            $database->install();
        } catch (Exception $e) {
            $exceptionLogger->log($e);
            return false;
        }
        return true;
    }

    /**
     * @param UninstallContext $uninstallContext
     * @return boolean
     */
    public function uninstall(UninstallContext $uninstallContext)
    {
        if ($uninstallContext->keepUserData()) {
            return true;
        }
        $services = Application::getServices();
        $exceptionLogger = $services->get('exceptionLogger');
        try {
            $database = $services->get(Database::class);
            $database->uninstall();
        } catch (Exception $e) {
            $exceptionLogger->log($e);
            return false;
        }
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function activate(ActivateContext $activateContext)
    {
        $services = Application::getServices();
        $client = $services->get(InnocigsClient::class);
        $exceptionLogger = $services->get('exceptionLogger');

        $result = false;
        // download InnoCigs items
        try {
            $client->downloadItems();
            $client->createArticleConfigurationFile($this->getPath());
            // $activateContext->scheduleClearCache(InstallContext::CACHE_LIST_ALL);
            $result = true;
        } catch(Exception $e) {
            $exceptionLogger->log($e);
        }
        return $result;
    }

    public function deactivate(DeactivateContext $context)
    {
        parent::deactivate($context); // TODO: Change the autogenerated stub
    }
}
